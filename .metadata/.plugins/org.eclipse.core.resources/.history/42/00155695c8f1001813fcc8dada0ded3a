package superhero;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;



public class Player
{
	HashSet<GameCharacter> characters;
	int coins;

	public Player(int coins,Set<GameCharacter> characters)
	{
		this.coins = coins;
		this.characters = (HashSet<GameCharacter>) characters;
	}
	
	public int getCoins()
	{
		return this.getCoins();
	}
	public Set<GameCharacter> getCharacters()
	{
		return this.characters;
	}
	public void buy(GameCharacter gc) throws IllegalArgumentException
	{
		if(this.getCharacters().contains(gc))
		{
			throw new IllegalArgumentException();
		}
		if(this.getCoins() - gc.getCost() < 0)
		{
			throw new IllegalArgumentException();
		}
		this.characters.add(gc);
		this.coins = this.coins - gc.getCost();
	}
	
	public Set<GameCharacter> chooseCharacters(Power... neededPowers)
	{
		HashSet<Power> selectionCriteria = new HashSet<>(Arrays.asList(neededPowers));
		HashSet<Power> selectedPower = new HashSet<>();
		HashSet<GameCharacter> out = new HashSet<>();
		for(Power power: selectionCriteria)
		{
			for(GameCharacter character : this.getCharacters())
			{
				if(character.getPowers().contains(power))
				{
					out.add(character);
					selectedPower.add(power);
				}
			}
		}
		selectionCriteria.removeAll(selectedPower);
		if(selectionCriteria.isEmpty())
		{
			return out;
		}
		
		HashSet<GameCharacter> toBuy = new HashSet<>();
		ArrayList<GameCharacter> available = new ArrayList<>(GameCharacters.getAllCharacters());
		int totalCost = 0;
		Collections.sort(available);
		for(GameCharacter character : available)
		{
			if(this.characters.contains(character))
			{
				continue;
			}
			for(Power power : character.getPowers())
			{
				if(selectionCriteria.contains(power))
				{
					if(character.getCost() <= (totalCost + this.coins))
					{
						totalCost+= character.getCost();
						toBuy.add(character);
						for(Power power1 : character.getPowers())
						{
							selectionCriteria.remove(power1);
						}
					}
				}
			}
		}
		if(selectionCriteria.isEmpty())
		{
			for(GameCharacter character2 : toBuy)
			{
				this.buy(character2);
				out.add(character2);
			}
		}
		else {
			return null;
		}
		return out;	
	}
}