import java.io.DataOutput;
import java.util.function.DoubleToLongFunction;

public class DoubleLinkedList {
	
	// Class for Doubly Linked List
		Node head; // head of list 
		/* Doubly Linked list Node*/
		class Node { 
			int data; 
			Node prev; 
			Node next; 

			// Constructor to create a new node 
			// next and prev is by default initialized as null 
			Node(int d) { data = d; } 
		} 
		
		

		// Adding a node at the front of the list 
		public void insertAtHead(int new_data) 
		{ 
		    /* 1. allocate node  
		    * 2. put in the data */
		    Node new_Node = new Node(new_data); 
		    
		    
		    /* 3. Make next of new node as head and previous as NULL */
		    new_Node.next = head; 
		    new_Node.prev = null; 
		  
		    /* 4. change prev of head node to new node */
		    if (head != null) 
		        head.prev = new_Node; 
		    
		    /* 5. move the head to point to the new node */
		    head = new_Node; 
		} 
		
		//DeleteNode in a List
		public void deleteNode(Node head_ref,Node toDelete)
		{
			//Check to see if the node to delete is the head
			//If So, delete Next current head
			if(toDelete == head)
			{
				head = toDelete.next;
			}
			//Set Next to previous toDelete if exists
			//Change only if node todleete is not the Last Ones
			if(toDelete.next != null)
			{
				toDelete.next.prev = toDelete.prev;
			}
			
			//Change prev node only if not the head
			if(toDelete.prev != null)
			{
				toDelete.prev.next = toDelete.next;
			}
			
			return;
		}
		
		//Check if node x is part of list
		public boolean checkList(DoubleLinkedList list , Node x)
		{
			//Search of the linked list for element x
			Node a = list.head;
			while(a != null && a.data != x.data )
			{
				a = x.next;
			}
			return true;
		}
		
		//Check if node x is part of the list and returns that node
		public Node searchList(DoubleLinkedList list,Node x)
		{
			Node current = list.head;
			while(current != null)
			{
				if(current.data == x.data)
				{
					return current;
				}
				else {
					current = current.next;
				}
			}
			return x;
			
		}
		//Check if list is empty
		public boolean EmptyList(DoubleLinkedList list)
		{
			//we just need to heck if there is an element at the head
			if(list.head == null)
			{
				return true;
			}
			else {
				return false;
			}
			
		}

		//Returns the size of the list
		public int size(DoubleLinkedList list) {
		   int count = 0;
		   Node current = list.head;
		   while(current != null)
		   {
			   current = current.next;
			   count ++;
		   }
		   return count;
		}
		
		
		//Union of two lists
		public DoubleLinkedList unionOfLists(DoubleLinkedList list1, DoubleLinkedList list2)
		{
			Node head1 = list1.head;
			Node head2 = list2.head;
			DoubleLinkedList listResult = new DoubleLinkedList();
			//Insert all elements of List1 into The result
			while(head1 != null)
			{
				listResult.insertAtHead(head1.data);
				head1 = head1.next;
			}
			
			//Insert elements of t2 that are not present
			while(head2 !=null)
			{
				if(!checkList(listResult, head2))
				{
					listResult.insertAtHead(head2.data);
				}
				else {
					head2 = head2.next;
				}
			}
			
			return listResult;
		}
		
		//Returns the intersection of Two double linked list
		public DoubleLinkedList intersection(DoubleLinkedList list1,DoubleLinkedList list2)
		{
			Node head1 = list1.head;
			Node head2 = list2.head;
			DoubleLinkedList result = new DoubleLinkedList();
			//Check list2 with elements of list one for correspondence and adds it to the resulting intersetion list
			while(head1 != null)
			{
				if(checkList(list2, head1))
				{
					result.insertAtHead(head1.data);
				}
				head1 = head1.next;
			}
			return result;
		}
		
		
		public DoubleLinkedList difference(DoubleLinkedList list1, DoubleLinkedList list2)
		{
			Node head1 = list1.head;
			Node head2 = list2.head;
			DoubleLinkedList result = new DoubleLinkedList();
			//Iterates over elements of list 1 and checks if they are present in list2
			while(head1 != null)
			{
				//If they are present is not a difference so get enxt result in the list
				if(checkList(list2, head1))
				{
					head1 = head1.next;
				}//If they are not present add them to result
				else {
					result.insertAtHead(head1.data);
				}
			}
			return result;
		}
		
		public DoubleLinkedList subSet(DoubleLinkedList list1, DoubleLinkedList list2)
		{
			Node head1 = list1.head;
			Node head2 = list2.head;
		}
		
		
	 


}
