package superhero;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import com.sun.org.apache.bcel.internal.generic.ArrayInstruction;

public class Player
{
	HashSet<GameCharacter> characters;
	int coins;

	public Player(int coins,Set<GameCharacter> characters)
	{
		this.coins = coins;
		this.characters = (HashSet<GameCharacter>) characters;
	}
	
	public int getCoins()
	{
		return this.getCoins();
	}
	public Set<GameCharacter> getCharacters()
	{
		return this.characters;
	}
	public void buy(GameCharacter gc) throws IllegalArgumentException
	{
		if(this.getCharacters().contains(gc))
		{
			throw new IllegalArgumentException();
		}
		if(this.getCoins() - gc.getCost() < 0)
		{
			throw new IllegalArgumentException();
		}
		this.characters.add(gc);
		this.coins = this.coins - gc.getCost();
	}
	
	public Set<GameCharacter> chooseCharacters(Power... neededPowers)
	{
		HashSet<Power> selectionCriteria = new HashSet<>(Arrays.asList(neededPowers));
		HashSet<Power> selectedPower = new HashSet<>();
		HashSet<GameCharacter> out = new HashSet<>();
		for(Power power: selectionCriteria)
		{
			for(GameCharacter character : this.getCharacters())
			{
				if(character.getPowers().contains(power))
				{
					out.add(character);
					selectedPower.add(power);
				}
			}
		}
		selectionCriteria.removeAll(selectedPower);
		if(selectionCriteria.isEmpty())
		{
			return out;
		}
		
		HashSet<GameCharacter> toBuy = new HashSet<>();
		ArrayList<GameCharacter> selected = new ArrayList<>(GameCharacters.getAllCharacters());
		int totalCost = 0;
	}
}