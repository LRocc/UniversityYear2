package superhero;

import java.util.*;

public class Player
{

    int coins;
    HashSet<GameCharacter> characters;
    public Player(int coins,Set<GameCharacter> characters)
    {
        this.coins = coins;
        this.characters = (HashSet<GameCharacter>)characters;
    }

    public int getCoins()
    {
        return this.coins;
    }
    public Set<GameCharacter> getCharacters()
    {
        return this.characters;
    }

    public void buy(GameCharacter gc) throws IllegalArgumentException
    {
        if(this.getCharacters().contains(gc))
        {
            throw new IllegalArgumentException();
        }
        if (this.getCoins() - gc.getCost() < 0)
        {
            throw new IllegalArgumentException();
        }
        this.characters.add(gc);
        this.coins = this.coins - gc.getCost();
    }

    public Set<GameCharacter> chooseCharacters(Power... neededPowers)
    {
    	HashSet<Power> selectionCriteria = new HashSet<>(Arrays.asList(neededPowers));
    	HashSet<Power> selectedPowers = new HashSet<>();
    	HashSet<GameCharacter> out = new HashSet<>();
    	for(Power power: selectionCriteria)
    	{
    		for(GameCharacter character : this.getCharacters())
    		{
    			if(character.getPowers().contains(power))
    			{
    				out.add(character);
    				selectedPowers.add(power);
    			}
    		}
    	}
    	
    	selectionCriteria.removeAll(selectedPowers);
    	if(selectionCriteria.isEmpty())
    	{
    		return out;
    	}
    	
    	int totalCost = 0;
    	HashSet<GameCharacter> toBuy = new HashSet<>();
    	HashSet<GameCharacter> available = new HashSet<>(GameCharacters.getAllCharacters());
    	
    	for(GameCharacter character : available)
    	{
    		if(this.getCharacters().contains(character))
    		{
    			continue;
    		}
    	}
    }
}

    
    