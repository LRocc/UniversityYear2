import java.util.function.DoubleToLongFunction;

public class DoubleLinkedList {
	
	// Class for Doubly Linked List
		Node head; // head of list 
		/* Doubly Linked list Node*/
		class Node { 
			int data; 
			Node prev; 
			Node next; 

			// Constructor to create a new node 
			// next and prev is by default initialized as null 
			Node(int d) { data = d; } 
		} 
		
		

		// Adding a node at the front of the list 
		public void insertAtHead(int new_data) 
		{ 
		    /* 1. allocate node  
		    * 2. put in the data */
		    Node new_Node = new Node(new_data); 
		    
		    
		    /* 3. Make next of new node as head and previous as NULL */
		    new_Node.next = head; 
		    new_Node.prev = null; 
		  
		    /* 4. change prev of head node to new node */
		    if (head != null) 
		        head.prev = new_Node; 
		    
		    /* 5. move the head to point to the new node */
		    head = new_Node; 
		} 
		
		//DeleteNode in a List
		public void deleteNode(Node head_ref,Node toDelete)
		{
			//Check to see if the node to delete is the head
			//If So, delete Next current head
			if(toDelete == head)
			{
				head = toDelete.next;
			}
			//Set Next to previous toDelete if exists
			//Change only if node todleete is not the Last Ones
			if(toDelete.next != null)
			{
				toDelete.next.prev = toDelete.prev;
			}
			
			//Change prev node only if not the head
			if(toDelete.prev != null)
			{
				toDelete.prev.next = toDelete.next;
			}
			
			return;
		}
		
		
		public Node checkList(DoubleLinkedList list , Node x)
		{
			//Search of the linked list for element x
			Node a = list.head;
			while(a != null && a.data != x.data )
			{
				a = x.next;
			}
			return a;
		}
		
		
		public Node searchList(DoubleLinkedList list,Node x)
		{
			
			return x;
			
		}

	 


}
